buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven {url='https://repo.spongepowered.org/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
        classpath 'com.wynprice.cursemaven:CurseMaven:2.1.3'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'
apply plugin: 'eclipse'

jarJar.enable()

group = "mod.${author}.${modid}"
version = "${mod_version}-${minecraft_version}"
archivesBaseName = modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "official", version: "${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args "--debug", "--stacktrace", "--scan", "-mixin.config=${modid}.mixins.json".toString()
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args "--mod", modid, "--all", "--output", file('src/generated/resources/'), "--existing", file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: '[MC1.18.2-1.1.3,)') {
        jarJar.pin(it, project.registrate_version)
    }

    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation fg.deobf("curse.maven:create-328085:3934676")
    implementation fg.deobf("curse.maven:flywheel-486392:3934664")
    //implementation fg.deobf("com.simibubi.create:Create:mc${create_version}")
    //implementation fg.deobf("com.jozufozu.flywheel:Flywheel-Forge:${flywheel_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes([
                "Specification-Title"     : modid,
                "Specification-Vendor"    : author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modid}.mixins.json"
        ])
    }
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

artifacts {
    archives deobfJar
}

build.dependsOn deobfJar

jar.finalizedBy('reobfJar')


def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def hasUnstaged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '--porcelain'
        standardOutput = stdout
    }
    def result = stdout.toString().replaceAll("M gradlew", "").trim()
    if (!result.isEmpty())
        println("Found stageable results:\n${result}\n")
    return !result.isEmpty()
}

buildConfig {
    buildConfigField 'String', 'MODID', "\"${modid}\""
    buildConfigField 'String', 'VERSION', "\"${project.version}\""
    buildConfigField 'String', 'DISPLAY_NAME', "\"${display_name}\""
    def gitstage = "\"${getGitHash()}" + (hasUnstaged() ? "-modified" : "") + "\""
    println("Using git stage ${gitstage}")
    buildConfigField "String", "GITHASH", gitstage

    version = project.version
    packageName = project.group
}